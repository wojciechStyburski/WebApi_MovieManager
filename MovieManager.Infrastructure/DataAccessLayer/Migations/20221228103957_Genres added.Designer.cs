// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieManager.Infrastructure.DataAccessLayer;

#nullable disable

namespace MovieManager.Infrastructure.DataAccessLayer.Migations
{
    [DbContext(typeof(MovieManagerDbContext))]
    [Migration("20221228103957_Genres added")]
    partial class Genresadded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("MovieManager.Domain.Entities.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51a340e7-c0b9-465c-89d9-2c931b712514")
                        });
                });

            modelBuilder.Entity("MovieManager.Domain.Entities.DirectorBiography", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Career")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CityOfBirth")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CountryOfBirth")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Education")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId")
                        .IsUnique();

                    b.ToTable("DirectorBiographies");
                });

            modelBuilder.Entity("MovieManager.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08625d7c-1fd3-4bfa-ae7f-9f4f279dbdfd"),
                            Name = "Dramat"
                        },
                        new
                        {
                            Id = new Guid("f745f7f3-58f9-4e24-ba83-d3e1a09cee34"),
                            Name = "Komedia"
                        },
                        new
                        {
                            Id = new Guid("3444c4d1-fa54-4e71-a330-79b5c86b48a2"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("918894d8-8813-481d-9fe8-11f9146f8954"),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("336e9f8a-78a1-4e72-97a2-b8cde37d41f7"),
                            Name = "Akcja"
                        },
                        new
                        {
                            Id = new Guid("f83ca6b7-6df7-4526-8d06-8ae5d246e3a0"),
                            Name = "Science fiction"
                        },
                        new
                        {
                            Id = new Guid("0b8a19b6-b2b3-4eb4-8f6e-710fd729ca9e"),
                            Name = "Dokumentalny"
                        },
                        new
                        {
                            Id = new Guid("0e77696c-db1a-4e63-9373-801fd73af288"),
                            Name = "Musical"
                        });
                });

            modelBuilder.Entity("MovieManager.Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f25d6fd-db78-49a9-9d79-e210abf7fa5f"),
                            DirectorId = new Guid("51a340e7-c0b9-465c-89d9-2c931b712514"),
                            Name = "Pan Tadeusz",
                            ReleaseYear = 1999
                        },
                        new
                        {
                            Id = new Guid("aba6cf27-8f2a-4c85-b75d-ea9a0065ac40"),
                            DirectorId = new Guid("51a340e7-c0b9-465c-89d9-2c931b712514"),
                            Name = "Popiół i diament",
                            ReleaseYear = 1958
                        });
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("MovieManager.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieManager.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieManager.Domain.Entities.Director", b =>
                {
                    b.OwnsOne("MovieManager.Domain.ValueObjects.PersonName", "DirectorName", b1 =>
                        {
                            b1.Property<Guid>("DirectorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("DirectorId");

                            b1.ToTable("Directors");

                            b1.WithOwner()
                                .HasForeignKey("DirectorId");

                            b1.HasData(
                                new
                                {
                                    DirectorId = new Guid("51a340e7-c0b9-465c-89d9-2c931b712514"),
                                    FirstName = "Andrzej",
                                    LastName = "Wajda"
                                });
                        });

                    b.Navigation("DirectorName");
                });

            modelBuilder.Entity("MovieManager.Domain.Entities.DirectorBiography", b =>
                {
                    b.HasOne("MovieManager.Domain.Entities.Director", "Director")
                        .WithOne("DirectorBiography")
                        .HasForeignKey("MovieManager.Domain.Entities.DirectorBiography", "DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("MovieManager.Domain.Entities.Movie", b =>
                {
                    b.HasOne("MovieManager.Domain.Entities.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("MovieManager.Domain.Entities.Director", b =>
                {
                    b.Navigation("DirectorBiography");

                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
